# -*- coding: utf-8 -*-
"""Numpy_PandasP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JMuSaNnNcm-ZSbQFhLzbtCNMfH8-n7oj
"""

import numpy as np
import pandas as pd
# Single dimension array
Single_Dimension_Numpy_Array=np.array([1,2,5,9,7,6,4,3,0,1,2,32,])
print(Single_Dimension_Numpy_Array)



Single_Dimension_Numpy_Array.ndim

# multi dimension array
Multi_Dimension_Numpy_Array=np.array([[21,54,87,98,65,32],[12,45,78,89,56,23]])
print(Multi_Dimension_Numpy_Array)

Multi_Dimension_Numpy_Array.ndim

# Numpy array with zero in it single dimension
Numpy_array_with_zero_in_it=np.zeros((1,3))
print(Numpy_array_with_zero_in_it)

# Numpy array with zero in it multi dimension
Numpy_Array_with_zero_in_it=np.zeros((2,3))
print(Numpy_Array_with_zero_in_it)

# Numpy array with one in it single dimension
Numpy_array_with_one_in_it=np.ones((1,3))
print(Numpy_array_with_one_in_it)

# Numpy array with zero in it multi dimension
Numpy_Array_with_one_in_it=np.ones((2,3))
print(Numpy_Array_with_one_in_it)

# numpy array with specific number single dimension
Numpy_Array_with_Specific_Number=np.full((1,8),51)
print(Numpy_Array_with_Specific_Number)

# numpy array with specific number multi dimension
Numpy_Array_With_Specific_Number=np.full((3,8),51)
print(Numpy_Array_With_Specific_Number)

# numpy_array_range
numpy_array_range=np.arange(10,50)
print(numpy_array_range)

# numpy_array_range with skip
numpy_array_range_with_skip=np.arange(10,50,5)
print(numpy_array_range_with_skip)

# array with random number
Random_number_list=np.random.randint(1,100,6) # in range of 1 to 100 we get 6 numbers
print(Random_number_list)

# checking shape of numpy array
ShapeofArray=Random_number_list.shape
print(ShapeofArray)

# changing shpe of Numpy array
Two_dim_NP_Array=np.array([[12,14,15,16,17],[25,34,68,32,10]])
print(Two_dim_NP_Array)

ShapeodTwoDimNPArray=Two_dim_NP_Array.shape
print(ShapeodTwoDimNPArray)

Two_dim_NP_Array.shape=(5,2)
print(Two_dim_NP_Array)

# joinig array
Array_NO1=np.array([14,15,1,7,7,8,6,8,4,2])
Array_NO2=np.array([15,17,4,5,8,61,4,5,8,6])

# joinign array vertical
VerticalResult=np.vstack((Array_NO1,Array_NO2))
print(VerticalResult)

# joinign array horizental
HorizentalResult=np.hstack((Array_NO1,Array_NO2))
print(HorizentalResult)

# joinign array column
ColumnStackResult=np.column_stack((Array_NO1,Array_NO2))
print(ColumnStackResult)

# intesection and difference
InterArray1=np.array([10,20,30,40,50,60,70,80,90])
InterArray2=np.array([50,60,70,80,90,100])

# Intesection
n1=np.intersect1d(InterArray1,InterArray2)
n1

#difference
n2=np.setdiff1d(InterArray1,InterArray2)
n2

n3=np.setdiff1d(InterArray2,InterArray1)
n3

# adition of two numpy array
add1=np.array([20,60,50,78,28])
add2=np.array([30,60,74,85,80])

Sum1=np.sum((add1,add2))
print(Sum1)

Sum2=np.sum((add1,add2),axis=0) # here we to zero to sum colums wise
print(Sum2)

Sum3=np.sum((add1,add2),axis=1)
print(Sum3)

# operation on all element in array using scaler value 
Np1=np.array([10,30,50])
NP1=Np1+4
NP1

NP2=Np1-4
NP2

NP3=Np1/4
NP3

NP4=Np1*4
NP4

# mean median Standard Devation
MAth=np.array([65,41,5,2,65,89,53])
np.mean(MAth)

np.median(MAth)

np.std(MAth)

Save=np.array([20,40,50,80])
np.save("kaushik",Save)

Load=np.load("kaushik.npy")
print(Load)

"""# **Pandas**"""

# Series =single dimension array
# dataframe= Multidimension array
series1=pd.Series([10,20,30,40])
print(series1)

# changing index
series2=pd.Series([10,20,30],index=["A","B","C"])
print(series2)

# dictoniries to series
series3=pd.Series({"A":21,"V":58,"R":80})
print(series3)

# dictoniries to series
series4=pd.Series({"A":21,"V":58,"R":80},index=["R","V","A"])
print(series4)

# extracting single element
s1=pd.Series([10,20,30,40,50,60,70,80,90])
s1[5]

#  extracting sequence of  element
s1[:5]

# extracting element from back
s1[-4:]

#basic math operation on series
s1+5

s2=pd.Series([90,80,70,60,50,40,30])
s1+s2

# dictorniries to dat set
Dataset=pd.DataFrame({"Name":["Kaushik","Harsh","Abhinesh","Reena"],"ID":[101,102,103,104]})
print(Dataset)

iris=pd.read_csv("iris.csv")

# tail = to se last some columns
# head= to se first some columns
# desc = detail or dataset
# shape= shape of dataset

iris.tail()

iris.head()

iris.shape

iris.describe()

iris.head()

iris.iloc[0:,1:]

# loc
iris.loc[0:9,("SepalLengthCm","Species")]

# drop colums
iris.head()

Droped=iris.drop([5,6,7],axis=0) #  if we use one insisted of zero it will drop column

Droped.head(10)

iris.mean()# we can use mean median mode

def double (s):
  return s*2
iris[["SepalWidthCm"]].apply(double)

iris["PetalWidthCm"].value_counts()

iris.sort_values("PetalWidthCm")

"""# Matplotlib"""

import numpy as np
import matplotlib.pyplot as plt
x= np.arange(1,11)
x

y=x*3
y

plt.plot(x,y)
plt.title("line plot")
plt.xlabel("Xlabel")
plt.ylabel("Ylabel")
plt.show()

# changing line style
plt.plot(x,y,color="g",linestyle=":",linewidth="2")
plt.show()

x=np.arange(1,10)
y1=x*2
y2=x*3
plt.plot(x,y1,color="g" ,linestyle=":",linewidth=2)
plt.plot(x,y2,color="r" ,linestyle="-.",linewidth=3)
plt.title("lineplot")
plt.xlabel("x axis")
plt.ylabel("y axis")
plt.grid(True)
plt.show()

# ading sublot
plt.subplot(1,2,1) # first 1 for rows and 2 for cloumn and 1 is index number
plt.plot(x,y1,color="g" ,linestyle=":",linewidth=2)
plt.xlabel("X axis")
plt.ylabel("Y axis")
plt.title("Subline plot")


plt.subplot(1,2,2)
plt.plot(x,y2,color="r" ,linestyle="-.",linewidth=3)
plt.xlabel("X axis")
plt.ylabel("Y axis")
plt.title("Subline plot")
plt.show()

"""# Bar Plot"""

# bar plot
Memeber={"kaushik":84,"Harsh":56,"Reena":27,"Abhinesh":40}
Names=list(Memeber.keys())
Score=list(Memeber.values())
plt.bar(Names,Score,color="g") # for horizental we can use barh
plt.xlabel("names")
plt.ylabel("Weight")
plt.title("Family")
plt.grid(True)
plt.show()

# Memeber={"kaushik":84,"Harsh":56,"Reena":27,"Abhinesh":40}
# Names=list(Memeber.keys())
# Score=list(Memeber.values())
# plt.barh(Names,Score) # for horizental we can use barh
# plt.xlabel("names")
# plt.ylabel("Weight")
# plt.title("Family")
# plt.grid(True)
# plt.show()

"""# Sceter plot"""

xs=[10,20,30,40,50,60,70,80,90]
ys=[8,1,7,2,0,3,7,3,2]
b=[7,2,5,6,9,1,4,5,3]
plt.scatter(xs,ys,marker="*",c="g",s=100)
# plt.plot(xs,ys,color="r",linestyle=":",linewidth="1")
plt.show()

plt.scatter(xs,ys,marker="*",c="g",s=100)
plt.scatter(xs,b,marker=".",c="y",s=200)
# plt.plot(xs,ys,color="r",linestyle=":",linewidth="1")
plt.show()

"""# Histogram Plot"""

data=[1,1,2,5,5,5,5,5,9,9,9,9,6,3,3,3,4,4,4,4,4,5,6,6,2,2,2,2,2,1,2,2,3]
plt.hist(data,color="Y")
plt.show()

"""# Histogram with data set"""

plt.hist(iris["SepalLengthCm"],color="r",bins=10)
plt.show()

one=[1,2,3,4,5,6,7,8,9]
two=[1,2,3,4,5,4,3,2,1]
three=[6,7,8,9,8,7,6,5,4]
Data=list([one,two,three])
plt.boxplot(Data)
plt.show()

"""# Piechart"""

Fruit=["Apple","Mango","Papaya","Banana"]
quantaity=[5,6,3,12]
plt.pie(quantaity,labels=Fruit)
plt.show()

# insert percent in Pie chart
Fruit=["Apple","Mango","Papaya","Banana"]
quantaity=[5,6,3,12]
plt.pie(quantaity,labels=Fruit,autopct="%0.1f%%",colors=["Red","blue","green","yellow"])
plt.show()

"""# donut chart"""

fruit=["Guava","Kingfruit","Starfruit","beach"]
Quantity=[6,3,20,15]
plt.pie(Quantity,labels=fruit,radius=2)
plt.pie([1],colors="w",radius=1)
plt.show()